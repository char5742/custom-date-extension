name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build the extension for multiple platforms
  build:
    name: Build Extension
    uses: ./extension-ci-tools/.github/workflows/_extension_distribution.yml
    with:
      extension_name: custom_date
      duckdb_version: v1.2.2
      ci_tools_version: v1.2.2
      build_duckdb_shell: true
      skip_tests: false
    secrets: inherit

  # Create release and upload artifacts
  release:
    name: Create Release
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      contents: write
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: custom_date-*
          merge-multiple: false

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.duckdb_extension" | sort

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Find and rename extension files for better organization
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "Processing artifact: $artifact_name"
              
              # Find extension files in this artifact
              find "$artifact_dir" -name "*.duckdb_extension" -type f | while read -r ext_file; do
                # Extract architecture/platform info from artifact name
                platform_info=$(echo "$artifact_name" | sed 's/custom_date-v[0-9]\+\.[0-9]\+\.[0-9]\+-extension-//')
                
                # Create descriptive filename
                new_name="custom_date-${{ steps.get_tag.outputs.tag }}-${platform_info}.duckdb_extension"
                
                echo "Copying $ext_file to release-assets/$new_name"
                cp "$ext_file" "release-assets/$new_name"
              done
              
              # Also copy any shell binaries if they exist
              find "$artifact_dir" -name "duckdb" -type f | while read -r shell_file; do
                platform_info=$(echo "$artifact_name" | sed 's/custom_date-v[0-9]\+\.[0-9]\+\.[0-9]\+-extension-//')
                new_name="duckdb-${{ steps.get_tag.outputs.tag }}-${platform_info}"
                
                echo "Copying shell $shell_file to release-assets/$new_name"
                cp "$shell_file" "release-assets/$new_name"
                chmod +x "release-assets/$new_name"
              done
            fi
          done
          
          echo "Release assets prepared:"
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          echo "## Custom Date Extension ${{ steps.get_tag.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "DuckDB extension for parsing YYYY.MM.DD date format." >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "Download the appropriate extension file for your platform and load it in DuckDB:" >> release_notes.md
          echo "" >> release_notes.md
          echo '```sql' >> release_notes.md
          echo "INSTALL './path/to/custom_date-${{ steps.get_tag.outputs.tag }}-<platform>.duckdb_extension';" >> release_notes.md
          echo "LOAD custom_date;" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "### Available Platforms" >> release_notes.md
          echo "" >> release_notes.md
          for file in release-assets/*.duckdb_extension; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              platform=$(echo "$filename" | sed "s/custom_date-${{ steps.get_tag.outputs.tag }}-//" | sed 's/.duckdb_extension$//')
              echo "- **$platform**: \`$filename\`" >> release_notes.md
            fi
          done
          echo "" >> release_notes.md
          echo "### Usage" >> release_notes.md
          echo "" >> release_notes.md
          echo "The extension automatically handles YYYY.MM.DD date format when casting VARCHAR to DATE:" >> release_notes.md
          echo "" >> release_notes.md
          echo '```sql' >> release_notes.md
          echo "SELECT '2024.01.15'::DATE;" >> release_notes.md
          echo "-- Returns: 2024-01-15" >> release_notes.md
          echo '```' >> release_notes.md
          
          # Output the release notes for debugging
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Custom Date Extension ${{ steps.get_tag.outputs.tag }}
          body_path: release_notes.md
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag, '-') }}
          generate_release_notes: true
          make_latest: ${{ !contains(steps.get_tag.outputs.tag, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "## Release Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Released Assets:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "- **$filename** ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done